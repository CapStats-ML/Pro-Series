astsa::lag1.plot(Sin.Tend.Ker, 12, corr = F)
nonlinearTseries::mutualInformation(Sin.Tend.Ker, lag.max = 100,
n.partitions = 50,
units = "Bits",
do.plot = TRUE)
TSstudio::ts_heatmap(Sin.Tend.Ker, padding = FALSE  ,
title = "Mapa de calor - Apertura Dif Argos en bolsa dias año")
acf(Diff_BoxCox,lag.max = 365, main='Serie diferenciada')
pacf(Diff_BoxCox,lag.max = 365, main='Serie diferenciada')
Periodo.Diff_BoxCox <- spectrum(BoxCox2, main = "Periodograma serie diferenciada",
xlim = c(0,10), log = "no", )
abline(v = Periodo.Diff_BoxCox$freq[match(max(Periodo.Diff_BoxCox$spec),
Periodo.Diff_BoxCox$spec)], col='red')
periodograma <- Periodo.Diff_BoxCox
max(Periodo.Diff_BoxCox$spec)
periodograma$freq[match(max(periodograma$spec),periodograma$spec)]
periodo=1/periodograma$freq[match(max(periodograma$spec),periodograma$spec)]
periodo # El periodo estimado es de aproximadamente 3.424658 días
acf(Sin.Tend.Ker,lag.max = 365, main='Serie sin tendecia Kernel')
pacf(Sin.Tend.Ker,lag.max = 365, main='Serie sin tendecia Kernel')
Periodo.Sin.Tend.Ker <- spectrum(Sin.Tend.Ker, main = "Periodograma Serie sin Tend Kernel",
xlim = c(0,20), log = "no")
abline(v = Periodo.Sin.Tend.Ker$freq[match(max(Periodo.Sin.Tend.Ker$spec),
Periodo.Sin.Tend.Ker$spec)], col='red')
periodograma <- Periodo.Sin.Tend.Ker
max(Periodo.Sin.Tend.Ker$spec)
periodograma$freq[match(max(periodograma$spec),periodograma$spec)]
periodo=1/periodograma$freq[match(max(periodograma$spec),periodograma$spec)]
periodo
Tb_BoxCox<-as_tsibble(Diff_BoxCox,index=tibble(fecha))
colnames(Tb_BoxCox)<-c("Fecha","Apertura")
# Definir columna de día y el mes como factor (abreviado)
Tb_BoxCox$dia <- wday(Tb_BoxCox$Fecha, label = TRUE, abbr = TRUE, week_start = 1)
Tb_BoxCox$mes <- factor(month.abb[month(Tb_BoxCox$Fecha)], levels = month.abb)
Tb_BoxCox %>%
mutate(diff_ND = Apertura - lag(Apertura)) %>%
ggplot(aes(x = dia, y = diff_ND)) +
geom_boxplot() +
labs(title = "Distribución de diferencias díarias", x = "Día", y = "Diferencia respecto al valor anterior")
Tb_BoxCox <- Tb_BoxCox %>%
mutate(mes = factor(month.abb[month(Fecha)], levels = month.abb))
Tb_BoxCox %>%
mutate(diff_ND = Apertura - lag(Apertura)) %>%
ggplot(aes(x = mes, y = diff_ND)) +
geom_boxplot() +
labs(title = "Distribución de diferencias mensuales", x = "Mes", y = "Diferencia respecto al valor anterior")
TsbApertura <- as_tsibble(G_ARGOS[,c(1,3)], index = Fecha)
TsbApertura
TsbApertura[,3] <- diff(TsbApertura$Apertura, lag = 1)
TsbApertura <- as_tsibble(G_ARGOS[,c(1,3)], index = Fecha)
Mod.Est.Apertura <-  TsbApertura %>% model(
'Fourier (1 Componentes)' = ARIMA(Apertura ~ fourier(K = 1) + pdq(0, 0, 0) + PDQ(0, 0, 2)),
'Fourier (2 Componentes)' = ARIMA(Apertura ~ fourier(K = 2.5) + pdq(0, 0, 0) + PDQ(0, 0, 3)),
'Dummy' = ARIMA(Apertura ~ season() + pdq(0, 0, 0) + PDQ(0, 0, 1))
)
Mod.Ajd.Est.Apertura <- TsbApertura%>%
left_join(fitted(Mod.Est.Apertura)|>group_by(.model)%>%
pivot_wider(names_from = .model, values_from = .fitted))
# Obtener sigma^2, AIC y BIC de los modelos en Mod.Est.Apertura
model_results <- Mod.Est.Apertura %>%
glance() %>%
select(.model, sigma2, AIC, BIC)
# Agregar información adicional sobre los modelos
model_results <- model_results %>%
mutate(Modelo = case_when(
.model == 'Fourier (1 Componentes)' ~ 'Fourier (1 Componentes)',
.model == 'Fourier (2 Componentes)' ~ 'Fourier (2 Componentes)',
.model == 'Dummy' ~ 'Dummy'
)) %>%
select(Modelo, sigma2, AIC, BIC)
# Mostrar la tabla con los resultados
print(model_results)
Mod.Ajd.Est.Apertura = as.data.frame(Mod.Ajd.Est.Apertura)
# Establecer el diseño de las gráficas
par(mfrow = c(3, 1), mar = c(4, 4, 2, 1))  # 3 filas, 1 columna, márgenes ajustados
# Graficar cada serie de datos ajustada por separado
for (i in 3:5) {  # Columnas 3 a 5 corresponden a 'Fourier (2 Componentes)', 'Fourier (3 Componentes)', 'Dummy'
# Nombre de la columna actual
col_name <- colnames(Mod.Ajd.Est.Apertura)[i]
# Graficar los datos originales vs. valores ajustados para la columna actual
plot(
x = Mod.Ajd.Est.Apertura$Fecha,
y = Mod.Ajd.Est.Apertura[, i],
type = 'l',
col = 'red',  # Color para la serie ajustada
lwd = 1.2,  # Grosor de la línea
ylim = c(min(Mod.Ajd.Est.Apertura[, c(3:5)], na.rm = TRUE), max(Mod.Ajd.Est.Apertura[, c(3:5)], na.rm = TRUE)),  # Establecer límites del eje y
main = paste("Datos Originales vs. Valores Ajustados:", col_name),
xlab = "Fecha",
ylab = "Valor"
)
# Agregar la línea de los datos originales ('value') en negro
lines(
x = Mod.Ajd.Est.Apertura$Fecha,
y = Mod.Ajd.Est.Apertura$Apertura,
type = 'l',
col = 'black',  # Color negro para los datos originales
lwd = 0.7  # Grosor de la línea
)
}
par(mfrow = c(1,1))
Mod.Est.Apertura <-  TsbApertura %>% model(
'Fourier (1 Componentes)' = ARIMA(Apertura ~ fourier(K = 1) + pdq(0, 0, 0) + PDQ(0, 0, 1)),
'Fourier (2 Componentes)' = ARIMA(Apertura ~ fourier(K = 2) + pdq(0, 0, 0) + PDQ(0, 0, 1)),
'Dummy' = ARIMA(Apertura ~ season() + pdq(0, 0, 0) + PDQ(0, 0, 1))
)
Mod.Ajd.Est.Apertura <- TsbApertura%>%
left_join(fitted(Mod.Est.Apertura)|>group_by(.model)%>%
pivot_wider(names_from = .model, values_from = .fitted))
# Obtener sigma^2, AIC y BIC de los modelos en Mod.Est.Apertura
model_results <- Mod.Est.Apertura %>%
glance() %>%
select(.model, sigma2, AIC, BIC)
# Agregar información adicional sobre los modelos
model_results <- model_results %>%
mutate(Modelo = case_when(
.model == 'Fourier (1 Componentes)' ~ 'Fourier (1 Componentes)',
.model == 'Fourier (2 Componentes)' ~ 'Fourier (2 Componentes)',
.model == 'Dummy' ~ 'Dummy'
)) %>%
select(Modelo, sigma2, AIC, BIC)
# Mostrar la tabla con los resultados
print(model_results)
Mod.Ajd.Est.Apertura = as.data.frame(Mod.Ajd.Est.Apertura)
# Establecer el diseño de las gráficas
par(mfrow = c(3, 1), mar = c(4, 4, 2, 1))  # 3 filas, 1 columna, márgenes ajustados
# Graficar cada serie de datos ajustada por separado
for (i in 3:5) {  # Columnas 3 a 5 corresponden a 'Fourier (2 Componentes)', 'Fourier (3 Componentes)', 'Dummy'
# Nombre de la columna actual
col_name <- colnames(Mod.Ajd.Est.Apertura)[i]
# Graficar los datos originales vs. valores ajustados para la columna actual
plot(
x = Mod.Ajd.Est.Apertura$Fecha,
y = Mod.Ajd.Est.Apertura[, i],
type = 'l',
col = 'red',  # Color para la serie ajustada
lwd = 1.2,  # Grosor de la línea
ylim = c(min(Mod.Ajd.Est.Apertura[, c(3:5)], na.rm = TRUE), max(Mod.Ajd.Est.Apertura[, c(3:5)], na.rm = TRUE)),  # Establecer límites del eje y
main = paste("Datos Originales vs. Valores Ajustados:", col_name),
xlab = "Fecha",
ylab = "Valor"
)
# Agregar la línea de los datos originales ('value') en negro
lines(
x = Mod.Ajd.Est.Apertura$Fecha,
y = Mod.Ajd.Est.Apertura$Apertura,
type = 'l',
col = 'black',  # Color negro para los datos originales
lwd = 0.7  # Grosor de la línea
)
}
par(mfrow = c(1,1))
data("AirPassengers")
plot(AirPassengers)
class(AirPassengers) ###Clase del objeto.
library(forecast)
library(MASS)
forecast::BoxCox.lambda(AirPassengers, method ="loglik", lower = -1, upper = 3)
##Recordar que la funcion nos entrega el valor de lambda
MASS::boxcox(lm(AirPassengers ~ 1),seq(-2, 3, length = 50))  ##Coincide con el anterior valor de lambda.
plot(BoxCox(AirPassengers,lambda = 0.2))
lAirPass<-log(AirPassengers)
plot(lAirPass)
MASS::boxcox(lm(lAirPass ~ 1),seq(-5, 5, length = 50))  ##Coincide con el anterior
forecast::BoxCox.lambda(lAirPass, method ="loglik", lower = -5, upper = 5)
library(VGAM)
library(car)
VGAM::yeo.johnson(AirPassengers, lambda = 0)
car::yjPower(AirPassengers,lambda=0)
summary(fit_pasajero <- lm(lAirPass~time(lAirPass), na.action=NULL))
plot(lAirPass, ylab="Número de Pasajeros en escala logarítmica")
abline(fit_pasajero,col = "red") # Se añade la recta ajusta
###Eliminamos la tendencia con la predicción la recta
NoTendlAirPass=lAirPass-predict(fit_pasajero)
plot(NoTendlAirPass,main="Serie Log Pasajeros Sin tendencia")
acf(lAirPass,lag.max = length(lAirPass))
acf(NoTendlAirPass,lag.max =length(NoTendlAirPass) )
descomposicion_lAirPass=decompose(lAirPass)
plot(descomposicion_lAirPass)
library(tidyverse)
library(lubridate)
library(timetk)
library(tibble)
library(zoo)
library(tsibble)
indice_logpasajeros=as.Date(as.yearmon(tk_index(lAirPass)))
indice_logpasajeros1=yearmonth(as.yearmon(tk_index(lAirPass)))
## Otra forma de extraer el indice estimetk::tk_index(lAirPass)
df_logpasajeros=data.frame(Fecha=indice_logpasajeros,Logpasa=as.matrix(lAirPass))
df_pasajeros=data.frame(Fecha=indice_logpasajeros,pasajeros=as.matrix(AirPassengers))
str(df_logpasajeros)
tibble_logpasajeros=tibble(df_logpasajeros)
tsibble_pasajeros=as_tsibble(df_pasajeros)
tibble_logpasajeros%>%timetk::plot_time_series(Fecha, Logpasa,
.interactive = TRUE,
.plotly_slider = TRUE)
###Ajuste STL moviendo los parámetros
tibble_logpasajeros%>%mutate(Logpasa_ajus=smooth_vec(Logpasa,span = 0.9, degree = 2))%>%
ggplot(aes(Fecha, Logpasa)) +
geom_line() +
geom_line(aes(y = Logpasa_ajus), color = "red")
library(feasts)
library(fable)
library(tsibble)
tsibble_lAirPass<-as_tsibble(lAirPass)
str(tsibble_lAirPass)
tsibble_lAirPass %>%
model(
STL(value ~ trend() +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
###Usando objeto tsibble
tsibble_lAirPass|>mutate(diff_lAirPass=tsibble::difference(value,lag=1,differences = 1))|>
autoplot(.vars =diff_lAirPass ) + labs(subtitle = "Cambios en escala logarítmica de los pasajeros")
tsibble_lAirPass<-tsibble_lAirPass|>mutate(diff_lAirPass=tsibble::difference(value,lag=1,differences = 1))
###Diferenciando basado en el objeto tibble
tibble_logpasajeros%>%mutate(diff_Logpasa=Logpasa-lag(Logpasa))%>%plot_time_series(Fecha,diff_Logpasa)
tibble_logpasajeros<-tibble_logpasajeros%>%mutate(diff_Logpasa=Logpasa-lag(Logpasa))
dlAirPass<-diff(lAirPass)
plot(dlAirPass)
library(astsa)
par(mar = c(3,2,3,2))
astsa::lag1.plot(dlAirPass, 12,corr=T)
acf(dlAirPass, 48, main="Serie diferenciada y con logaritmo de pasajeros")
pacf(dlAirPass, 48)
library(nonlinearTseries)
library(tseriesChaos)
et=rnorm(1100,0,1)
xt=rep(0,1100)
for(t in 13:1100)
{
xt[t]=(xt[t-1]-1)/(xt[t-12]^2+1)+et[t]
}
xtsimul=as.ts(xt[101:1100])
length(xtsimul)
plot(xtsimul)
acf(xtsimul)
par(mar = c(3,2,3,2))
astsa::lag1.plot(xtsimul, 12,corr = F)
nonlinearTseries::mutualInformation(xtsimul,lag.max = 100,n.partitions = 50,units = "Bits",do.plot = TRUE) #c("Nats", "Bits", "Bans")
pacf(xtsimul)
tseriesChaos::mutual(xtsimul, partitions = 50, lag.max = 100, plot=TRUE)
###Dado que la serie es mensual, monthplot permite hacer los gráficos de las subseries.
monthplot(dlAirPass) ##Note hay meses muchas subseries están centradas alrededor de valores diferentes usando el objeto ts
tsibble_lAirPass%>%na.omit()|>gg_subseries(diff_lAirPass,period=12) ##Gráfico de subseries usando el objeto tibble
tibble_logpasajeros %>%na.omit()|>
mutate(
Mes = str_c("", as.character(lubridate::month(Fecha,label=TRUE)))
) %>%
plot_time_series(
.date_var = Fecha,
.value = diff_Logpasa,
.facet_vars = Mes,
.facet_ncol = 4,
.color_var = Mes,
.facet_scales = "fixed",
.interactive = FALSE,
.legend_show = FALSE,
.smooth = FALSE
)
library(forecast)
ggseasonplot(dlAirPass)
##Basado en el objeto tibble
tibble_logpasajeros%>%na.omit()%>%plot_seasonal_diagnostics(.date_var = Fecha,.value = diff_Logpasa,.feature_set = c("month.lbl"),.geom="boxplot")
ggplot(tibble_logpasajeros %>%na.omit()|>
mutate(
Mes = str_c("Mes ", as.character(lubridate::month(Fecha)))
), aes(x = diff_Logpasa)) +
geom_density(aes(fill = Mes)) +
ggtitle("LosPass - Estimación de la densidad vía Kernel por mes") +
facet_grid(rows = vars(as.factor(Mes)))
spectrum(as.numeric(dlAirPass),log='no')
PeriodgramadlAirPass=spectrum(as.numeric(dlAirPass),log='no')
ubicacionlogAir=which.max(PeriodgramadlAirPass$spec)
sprintf("El valor de la frecuencia donde se máximiza el periodograma para la serie es: %s",PeriodgramadlAirPass$freq[ubicacionlogAir])
sprintf("El periodo correspondiente es aproximadamente: %s",1/PeriodgramadlAirPass$freq[ubicacionlogAir])
library(tidyverse)
library(tsibble)
library(fable)
library(fabletools)
library(TSA)
tsibble_Airpass=as_tsibble(AirPassengers)
###Variables Dummy y Armónicos
forecast::seasonaldummy(AirPassengers)
Armonicos=TSA::harmonic(AirPassengers, m = 1)
tsibble_Airpass=as_tsibble(AirPassengers)
###Variables Dummy y Armónicos
forecast::seasonaldummy(AirPassengers)
Armonicos=TSA::harmonic(AirPassengers, m = 1)
forecast::seasonaldummy(G_ARGOS[,c(,3)])
forecast::seasonaldummy(G_ARGOS[,3])
Apertura <- ts(data = G_ARGOS$Apertura, start = c(2010,4),frequency = 365)
class(Apertura)
str(Apertura)
head(Apertura)
forecast::seasonaldummy(Apertura)
Armonicos=TSA::harmonic(Apertura, m = 1)
### Armónicos
forecast::fourier(Apertura,K=1)
tiempo=1
j=1
sin(2*pi*tiempo*j/12)
cos(2*pi*tiempo*j/12)
###Gráfica de los armónicos
harmonics = fourier(Aoertura, K = 6)
###Gráfica de los armónicos
harmonics = fourier(Apertura, K = 6)
harmonics
par(mar = c(1,4,1,1), mfrow = c(6,2))
for(i in 1:ncol(harmonics)){
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
TsbApertura
diff_TsbApertura <- TsbApertura |>
mutate(logdiff_apertura = difference(log(Apertura))) |>
select(Fecha, logdiff_apertura)
Modelo_serie_diff<-diff_TsbApertura|>model(
`Fourier1Airdiff`=ARIMA(logdiff_apertura~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
real_ajustado1<-diff_TsbApertura%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
real_ajustado1 %>%
autoplot() +
geom_line(data=real_ajustado1,aes(y=logdiff_apertura,colour="real"))+
geom_line(data=real_ajustado1,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
Modelo_serie_diff_Dummy<-diff_TsbApertura|>model(
`DummyAirdiff`=ARIMA(logdiff_apertura~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
Modelo_serie_diff_Dummy <- diff_TsbApertura %>% left_join(fitted(Modelo_serie_diff,by=index)) %>%
select(-.model)
Modelo_serie_diff_Dummy %>%
autoplot() +
geom_line(data=Modelo_serie_diff_Dummy,aes(y=logdiff_apertura,colour="real"))+
geom_line(data=Modelo_serie_diff_Dummy,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
ajuste_final_models<-diff_TsbApertura%>%model(
`Fourier1Airdiff`=ARIMA(logdiff_apertura~fourier(K=1)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier2Airdiff`=ARIMA(logdiff_apertura~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier3Airdiff`=ARIMA(logdiff_apertura~fourier(K=3)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`DummyAirdiff`=ARIMA(logdiff_apertura~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
glance(ajuste_final_models)
ajuste_final_models %>%
select(Fourier1Airdiff)%>%coef()
Modelo_serie_diff_models <- diff_TsbApertura %>%
left_join(fitted(ajuste_final_models)|>group_by(.model)%>%
pivot_wider(names_from = .model, values_from = .fitted))
Modelo_serie_diff_models %>%
autoplot() +
geom_line(data=Modelo_serie_diff_models,aes(y=diff_TsbApertura,colour="real"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier1Airdiff,colour="ajustadoFourier1"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier2Airdiff,colour="ajustadoFourier2"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier3Airdiff,colour="ajustadoFourier3"))+
geom_line(data=Modelo_serie_diff_models,aes(y=DummyAirdiff,colour="ajustadoDummy")) +
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustadoFourier1" = "red","ajustadoFourier2" = "blue","ajustadoFourier3"="green","ajustadoDummy"="yellow"))
rlang::last_trace()
Modelo_serie_diff_models %>%
autoplot() +
geom_line(data=Modelo_serie_diff_models,aes(y=diff_TsbApertura,colour="real"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier1Airdiff,colour="ajustadoFourier1"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier2Airdiff,colour="ajustadoFourier2"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier3Airdiff,colour="ajustadoFourier3"))+
geom_line(data=Modelo_serie_diff_models,aes(y=DummyAirdiff,colour="ajustadoDummy")) +
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustadoFourier1" = "red","ajustadoFourier2" = "blue","ajustadoFourier3"="green","ajustadoDummy"="yellow"))
ajuste_final_models <- diff_TsbApertura %>% model(
`Fourier1Airdiff` = ARIMA(logdiff_apertura ~ fourier(K = 1) + pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier2Airdiff` = ARIMA(logdiff_apertura ~ fourier(K = 2) + pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier3Airdiff` = ARIMA(logdiff_apertura ~ fourier(K = 3) + pdq(0, 0, 0) + PDQ(0, 0, 0)),
`DummyAirdiff` = ARIMA(logdiff_apertura ~ season() + pdq(0, 0, 0) + PDQ(0, 0, 0))
)
# Unir los valores ajustados
Modelo_serie_diff_models <- diff_TsbApertura %>%
left_join(
fitted(ajuste_final_models) %>%
group_by(.model) %>%
pivot_wider(names_from = .model, values_from = .fitted),
by = "Fecha"
)
Modelo_serie_diff_models %>%
autoplot(logdiff_apertura, color = "real") +
geom_line(aes(y = Fourier1Airdiff, colour = "ajustadoFourier1")) +
geom_line(aes(y = Fourier2Airdiff, colour = "ajustadoFourier2")) +
geom_line(aes(y = Fourier3Airdiff, colour = "ajustadoFourier3")) +
geom_line(aes(y = DummyAirdiff, colour = "ajustadoDummy")) +
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustadoFourier1" = "red", "ajustadoFourier2" = "blue", "ajustadoFourier3" = "green", "ajustadoDummy" = "yellow"))
Modelo_serie_diff_models %>%
autoplot(logdiff_apertura, color = "real") +
geom_line(aes(y = Fourier1Airdiff, colour = "ajustadoFourier1")) +
geom_line(aes(y = Fourier2Airdiff, colour = "ajustadoFourier2")) +
geom_line(aes(y = Fourier3Airdiff, colour = "ajustadoFourier3")) +
geom_line(aes(y = DummyAirdiff, colour = "ajustadoDummy")) +
scale_color_manual(name = "real/ajustado", values = c("black", "red", "blue", "green", "yellow"))
Modelo_serie_diff_models %>%
autoplot(logdiff_apertura, color = "real") +
geom_line(aes(y = Fourier1Airdiff, colour = "ajustadoFourier1")) +
geom_line(aes(y = Fourier2Airdiff, colour = "ajustadoFourier2")) +
geom_line(aes(y = Fourier3Airdiff, colour = "ajustadoFourier3")) +
geom_line(aes(y = DummyAirdiff, colour = "ajustadoDummy")) +
scale_color_manual( values = c("black", "red", "blue", "green", "yellow"))
Modelo_serie_diff_models %>%
autoplot(logdiff_apertura) +
geom_line(aes(y = Fourier1Airdiff, colour = "ajustadoFourier1")) +
geom_line(aes(y = Fourier2Airdiff, colour = "ajustadoFourier2")) +
geom_line(aes(y = Fourier3Airdiff, colour = "ajustadoFourier3")) +
geom_line(aes(y = DummyAirdiff, colour = "ajustadoDummy")) +
scale_color_manual( values = c("black", "red", "blue", "green", "yellow"))
Modelo_serie_diff_models %>%
autoplot(logdiff_apertura) +
geom_line(aes(y = Fourier1Airdiff, colour = "ajustadoFourier1")) +
geom_line(aes(y = Fourier2Airdiff, colour = "ajustadoFourier2")) +
geom_line(aes(y = Fourier3Airdiff, colour = "ajustadoFourier3")) +
geom_line(aes(y = DummyAirdiff, colour = "ajustadoDummy")) +
scale_color_manual( values = c("gray80", "red", "blue", "green", "yellow"))
Modelo_serie_diff_models %>%
autoplot(logdiff_apertura) +
geom_line(aes(y = Fourier1Airdiff, colour = "ajustadoFourier1")) +
geom_line(aes(y = Fourier2Airdiff, colour = "ajustadoFourier2")) +
geom_line(aes(y = Fourier3Airdiff, colour = "ajustadoFourier3")) +
geom_line(aes(y = DummyAirdiff, colour = "ajustadoDummy")) +
scale_color_manual( values = c("red", "blue", "green", "yellow"))
# Convertir a un formato largo para facilitar el uso de facet_wrap
Modelo_serie_diff_long <- Modelo_serie_diff_models %>%
pivot_longer(cols = starts_with("Fourier") | starts_with("Dummy"),
names_to = "Modelo",
values_to = "Ajuste")
# Crear gráficas separadas usando facet_wrap
Modelo_serie_diff_long %>%
ggplot(aes(x = Fecha)) +
geom_line(aes(y = logdiff_apertura, colour = "Real"), color = "black") +
geom_line(aes(y = Ajuste, colour = Modelo)) +
scale_color_manual(values = c("black", "red", "blue", "green", "yellow")) +
facet_wrap(~ Modelo, ncol = 2) +
labs(title = "Comparación de modelos", y = "Diferencia logarítmica", color = "Series") +
theme_minimal()
# Crear gráficas separadas usando facet_wrap
Modelo_serie_diff_long %>%
ggplot(aes(x = Fecha)) +
geom_line(aes(y = logdiff_apertura, colour = "Real"), color = "black") +
geom_line(aes(y = Ajuste, colour = Modelo)) +
scale_color_manual(values = c( "red", "blue", "green", "yellow")) +
facet_wrap(~ Modelo, ncol = 2) +
labs(title = "Comparación de modelos", y = "Diferencia logarítmica", color = "Series") +
theme_minimal()
ajuste_final_models <- diff_TsbApertura %>% model(
`Fourier1Airdiff` = ARIMA(logdiff_apertura ~ fourier(K = 1) + pdq(0, 0, 0) + PDQ(0, 0, 1)),
`Fourier2Airdiff` = ARIMA(logdiff_apertura ~ fourier(K = 2) + pdq(0, 0, 0) + PDQ(0, 0, 1)),
`Fourier3Airdiff` = ARIMA(logdiff_apertura ~ fourier(K = 3) + pdq(0, 0, 0) + PDQ(0, 0, 1)),
`DummyAirdiff` = ARIMA(logdiff_apertura ~ season() + pdq(0, 0, 0) + PDQ(0, 0, 1))
)
# Unir los valores ajustados
Modelo_serie_diff_models <- diff_TsbApertura %>%
left_join(
fitted(ajuste_final_models) %>%
group_by(.model) %>%
pivot_wider(names_from = .model, values_from = .fitted),
by = "Fecha"
)
# Convertir a un formato largo para facilitar el uso de facet_wrap
Modelo_serie_diff_long <- Modelo_serie_diff_models %>%
pivot_longer(cols = starts_with("Fourier") | starts_with("Dummy"),
names_to = "Modelo",
values_to = "Ajuste")
# Crear gráficas separadas usando facet_wrap
Modelo_serie_diff_long %>%
ggplot(aes(x = Fecha)) +
geom_line(aes(y = logdiff_apertura, colour = "Real"), color = "black") +
geom_line(aes(y = Ajuste, colour = Modelo)) +
scale_color_manual(values = c( "red", "blue", "green", "yellow")) +
facet_wrap(~ Modelo, ncol = 2) +
labs(title = "Comparación de modelos", y = "Diferencia logarítmica", color = "Series") +
theme_minimal()
ajuste_final_models <- diff_TsbApertura %>% model(
`Fourier1Airdiff` = ARIMA(logdiff_apertura ~ fourier(K = 1) + pdq(1, 0, 0) + PDQ(0, 0, 0)),
`Fourier2Airdiff` = ARIMA(logdiff_apertura ~ fourier(K = 2) + pdq(1, 0, 0) + PDQ(0, 0, 0)),
`Fourier3Airdiff` = ARIMA(logdiff_apertura ~ fourier(K = 3) + pdq(1, 0, 0) + PDQ(0, 0, 0)),
`DummyAirdiff` = ARIMA(logdiff_apertura ~ season() + pdq(1, 0, 0) + PDQ(0, 0, 0))
)
# Unir los valores ajustados
Modelo_serie_diff_models <- diff_TsbApertura %>%
left_join(
fitted(ajuste_final_models) %>%
group_by(.model) %>%
pivot_wider(names_from = .model, values_from = .fitted),
by = "Fecha"
)
# Convertir a un formato largo para facilitar el uso de facet_wrap
Modelo_serie_diff_long <- Modelo_serie_diff_models %>%
pivot_longer(cols = starts_with("Fourier") | starts_with("Dummy"),
names_to = "Modelo",
values_to = "Ajuste")
# Crear gráficas separadas usando facet_wrap
Modelo_serie_diff_long %>%
ggplot(aes(x = Fecha)) +
geom_line(aes(y = logdiff_apertura, colour = "Real"), color = "black") +
geom_line(aes(y = Ajuste, colour = Modelo)) +
scale_color_manual(values = c( "red", "blue", "green", "yellow")) +
facet_wrap(~ Modelo, ncol = 2) +
labs(title = "Comparación de modelos", y = "Diferencia logarítmica", color = "Series") +
theme_minimal()
# Crear gráficas separadas usando facet_wrap
Modelo_serie_diff_long %>%
ggplot(aes(x = Fecha)) +
geom_line(aes(y = logdiff_apertura, colour = "Real"), color = "black") +
geom_line(aes(y = Ajuste, colour = Modelo)) +
scale_color_manual(values = c( "red", "blue", "green", "yellow")) +
facet_wrap(~ Modelo, ncol = 2) +
labs(title = "MODELAMIENTO DE LA ESTACIONALIDAD DE LA SERIE",
y = "Diferencia logarítmica", color = "Series") +
theme_minimal()
