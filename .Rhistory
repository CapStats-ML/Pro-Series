real_ajustado1<-diff_TsbVdf%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
real_ajustado1 %>%
autoplot() +
geom_line(data=real_ajustado1,aes(y=logdiff_Vdf,colour="real"))+
geom_line(data=real_ajustado1,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
# Asegurarse de que las fechas estén correctamente formateadas
importaciones$fecha_completa <- as.Date(importaciones$fecha_completa)
# Crear la serie temporal usando tsibble
TsbVdf <- as_tsibble(importaciones[,c(13,3)], index = fecha_completa)
# Crear armónicos y Fourier para la serie VAFODO
forecast::seasonaldummy(VAFODO) # Dummies estacionales
Armonicos = TSA::harmonic(VAFODO, m = 1) # Armónicos
# Fourier con K=1
harmonics = forecast::fourier(VAFODO, K = 6)
# Graficar los armónicos
par(mar = c(1,4,1,1), mfrow = c(6,2))
for(i in 1:ncol(harmonics)) {
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
# Crear una nueva serie diferenciada logarítmica
diff_TsbVdf <- TsbVdf |>
mutate(logdiff_Vdf = difference(log(VAFODO))) |>
select(fecha_completa, logdiff_Vdf)
# Ajustar un modelo ARIMA con Fourier
Modelo_serie_diff <- diff_TsbVdf |> model(
Fourier1Airdiff = ARIMA(logdiff_Vdf ~ fourier(K = 2) + pdq(0, 0, 0) + PDQ(0, 0, 0))
)
TsbVdf
tsibble_Vdf <- TsbVdf %>%
mutate(Fecha = yearmonth(fecha_completa)) %>%
as_tsibble(index = fecha_completa)
# Crear armónicos y Fourier para la serie VAFODO
forecast::seasonaldummy(VAFODO) # Dummies estacionales
Armonicos = TSA::harmonic(VAFODO, m = 1) # Armónicos
# Fourier con K=1
harmonics = forecast::fourier(VAFODO, K = 6)
# Graficar los armónicos
par(mar = c(1,4,1,1), mfrow = c(6,2))
for(i in 1:ncol(harmonics)) {
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
# Crear una nueva serie diferenciada logarítmica
diff_TsbVdf <- TsbVdf |>
mutate(logdiff_Vdf = difference(log(VAFODO))) |>
select(fecha_completa, logdiff_Vdf)
# Ajustar un modelo ARIMA con Fourier
Modelo_serie_diff <- diff_TsbVdf |> model(
Fourier1Airdiff = ARIMA(logdiff_Vdf ~ fourier(K = 2) + pdq(0, 0, 0) + PDQ(0, 0, 0))
)
# Crear la serie temporal usando tsibble
TsbVdf <- as_tsibble(importaciones[,c(13,3)], index = fecha_completa)
TsbVdf <- as_tsibble(importaciones[,c(13,3)], index = fecha_completa) %>%
index_by(Month = ~ yearmonth(.)) # Definir la frecuencia mensual
TsbVdf
# Crear armónicos y Fourier para la serie VAFODO
forecast::seasonaldummy(VAFODO) # Dummies estacionales
Armonicos = TSA::harmonic(VAFODO, m = 1) # Armónicos
# Fourier con K=1
harmonics = forecast::fourier(VAFODO, K = 6)
# Graficar los armónicos
par(mar = c(1,4,1,1), mfrow = c(6,2))
for(i in 1:ncol(harmonics)) {
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
# Crear una nueva serie diferenciada logarítmica
diff_TsbVdf <- TsbVdf |>
mutate(logdiff_Vdf = difference(log(VAFODO))) |>
select(fecha_completa, logdiff_Vdf)
# Crear una nueva serie diferenciada logarítmica
diff_TsbVdf <- TsbVdf |>
mutate(logdiff_Vdf = difference(log(VAFODO))) |>
select(Month, logdiff_Vdf)
# Ajustar un modelo ARIMA con Fourier
Modelo_serie_diff <- diff_TsbVdf |> model(
Fourier1Airdiff = ARIMA(logdiff_Vdf ~ fourier(K = 2) + pdq(0, 0, 0) + PDQ(0, 0, 0))
)
#Continuar con la diferenciación logarítmica
diff_TsbVdf <- TsbVdf |>
mutate(logdiff_Vdf = difference(log(VAFODO))) |>
select(Month, logdiff_Vdf)
# Ajustar el modelo ARIMA con Fourier
Modelo_serie_diff <- diff_TsbVdf |> model(
Fourier1Airdiff = ARIMA(logdiff_Vdf ~ fourier(K = 2) + pdq(0, 0, 0) + PDQ(0, 0, 0))
)
TsbVdf <- TsbVdf %>% fill_gaps()
TsbVdf <- as_tsibble(importaciones[,c(13,3)], index = fecha_completa) %>%
index_by(Month = ~ yearmonth(.)) # Definir la frecuencia mensual
TsbVdf
TsbVdf <- TsbVdf %>% fill_gaps()
# Convertir a tsibble asegurando que es una serie mensual
TsbVdf <- as_tsibble(importaciones[,c(13,3)], index = fecha_completa) %>%
mutate(Month = yearmonth(fecha_completa)) # Definir la frecuencia mensual explícitamente
# Actualizar el índice de la serie a "Month"
TsbVdf <- TsbVdf %>%
as_tsibble(index = Month)
# Llenar huecos en la serie temporal (si hay)
TsbVdf <- TsbVdf %>% fill_gaps()
TsbVdf
# Crear armónicos y Fourier para la serie VAFODO
forecast::seasonaldummy(VAFODO) # Dummies estacionales
Armonicos = TSA::harmonic(VAFODO, m = 1) # Armónicos
# Fourier con K=1
harmonics = forecast::fourier(VAFODO, K = 6)
# Graficar los armónicos
par(mar = c(1,4,1,1), mfrow = c(6,2))
for(i in 1:ncol(harmonics)) {
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
#Continuar con la diferenciación logarítmica
diff_TsbVdf <- TsbVdf |>
mutate(logdiff_Vdf = difference(log(VAFODO))) |>
select(Month, logdiff_Vdf)
# Ajustar el modelo ARIMA con Fourier
Modelo_serie_diff <- diff_TsbVdf |> model(
Fourier1Airdiff = ARIMA(logdiff_Vdf ~ fourier(K = 2) + pdq(0, 0, 0) + PDQ(0, 0, 0))
)
# Obtener valores ajustados
real_ajustado1 <- diff_TsbVdf %>%
left_join(fitted(Modelo_serie_diff, by = index)) %>%
select(-.model)
# Graficar los valores reales y ajustados
real_ajustado1 %>%
autoplot() +
geom_line(aes(y = logdiff_Vdf, colour = "real")) +
geom_line(aes(y = .fitted, colour = "ajustado")) +
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
Modelo_serie_diff_Dummy <- diff_TsbVdf|>model(
`DummyAirdiff`=ARIMA(logdiff_Vdf~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
Modelo_serie_diff_Dummy <- diff_TsbVdf %>% left_join(fitted(Modelo_serie_diff,by=index)) %>%
select(-.model)
Modelo_serie_diff_Dummy %>%
autoplot() +
geom_line(data=Modelo_serie_diff_Dummy,aes(y=logdiff_Vdf,colour="real"))+
geom_line(data=Modelo_serie_diff_Dummy,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
ajuste_final_models<-diff_TsbVdf%>%model(
`Fourier1Airdiff`=ARIMA(logdiff_Vdf~fourier(K=1)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier2Airdiff`=ARIMA(logdiff_Vdf~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier3Airdiff`=ARIMA(logdiff_Vdf~fourier(K=3)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`DummyAirdiff`=ARIMA(logdiff_Vdf~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
glance(ajuste_final_models)
ajuste_final_models %>%
select(Fourier1Airdiff)%>%coef()
Modelo_serie_diff_models <- diff_TsbVdf %>%
left_join(fitted(ajuste_final_models)|>group_by(.model)%>%
pivot_wider(names_from = .model, values_from = .fitted))
ajuste_final_models <- diff_TsbVdf %>% model(
`Fourier1Airdiff` = ARIMA(logdiff_Vdf ~ fourier(K = 1) + pdq(1, 0, 0) + PDQ(0, 0, 0)),
`Fourier2Airdiff` = ARIMA(logdiff_Vdf ~ fourier(K = 2) + pdq(1, 0, 0) + PDQ(0, 0, 0)),
`Fourier3Airdiff` = ARIMA(logdiff_Vdf ~ fourier(K = 3) + pdq(1, 0, 0) + PDQ(0, 0, 0)),
`DummyAirdiff` = ARIMA(logdiff_Vdf ~ season() + pdq(1, 0, 0) + PDQ(0, 0, 0))
)
# Unir los valores ajustados
Modelo_serie_diff_models <- diff_TsbVdf %>%
left_join(
fitted(ajuste_final_models) %>%
group_by(.model) %>%
pivot_wider(names_from = .model, values_from = .fitted),
by = "Fecha"
)
diff_TsbVdf
# Unir los valores ajustados
Modelo_serie_diff_models <- diff_TsbVdf %>%
left_join(
fitted(ajuste_final_models) %>%
group_by(.model) %>%
pivot_wider(names_from = .model, values_from = .fitted),
by = "Month"
)
# Convertir a un formato largo para facilitar el uso de facet_wrap
Modelo_serie_diff_long <- Modelo_serie_diff_models %>%
pivot_longer(cols = starts_with("Fourier") | starts_with("Dummy"),
names_to = "Modelo",
values_to = "Ajuste")
# Crear gráficas separadas usando facet_wrap
Modelo_serie_diff_long %>%
ggplot(aes(x = Month)) +
geom_line(aes(y = logdiff_apertura, colour = "Real"), color = "black") +
geom_line(aes(y = Ajuste, colour = Modelo)) +
scale_color_manual(values = c( "red", "blue", "green", "yellow")) +
facet_wrap(~ Modelo, ncol = 2) +
labs(title = "MODELAMIENTO DE LA ESTACIONALIDAD DE LA SERIE",
y = "Diferencia logarítmica", color = "Series") +
theme_minimal()
# Crear gráficas separadas usando facet_wrap
Modelo_serie_diff_long %>%
ggplot(aes(x = Month)) +
geom_line(aes(y = logdiff_Vdf, colour = "Real"), color = "black") +
geom_line(aes(y = Ajuste, colour = Modelo)) +
scale_color_manual(values = c( "red", "blue", "green", "yellow")) +
facet_wrap(~ Modelo, ncol = 2) +
labs(title = "MODELAMIENTO DE LA ESTACIONALIDAD DE LA SERIE",
y = "Diferencia logarítmica", color = "Series") +
theme_minimal()
P <- expand.grid('beta' = list(F, NULL),
'gamma' = list(F, NULL),
'seasonal' = list('additive', 'multiplicative'))
logdiff_Vdf
Modelo_serie_diff_long
tail(Modelo_serie_diff, 10)
tail(Modelo_serie_diff_long, 10)
# Definir las fechas de inicio y fin
fecha_inicio <- as.Date("2012-01-01")
fecha_fin <- as.Date("2023-12-01")
# Crear un vector de fechas
fechas <- seq(fecha_inicio, fecha_fin, by = "Month")
# Crear un vector de fechas
fechas <- seq(fecha_inicio, fecha_fin, by = 'month')
# Asumiendo que BoxCox2 es tu vector de datos transformados
# Si no lo tienes, reemplaza BoxCox2 con tus datos reales
BoxCox <- ts(Diff_BoxCox, start = c(2012, 1), frequency = 12)
BoxCox
# Calcular el punto de división para el 70%
n <- length(BoxCox)
punto_division <- floor(n * 0.7)
# Crear los conjuntos de entrenamiento y prueba
BoxCox_train <- window(BoxCox, end = time(BoxCox)[punto_division])
BoxCox_test <- window(BoxCox, start = time(BoxCox)[punto_division + 1])
# Ajustar las fechas de inicio para train y test
fecha_inicio_test <- fechas[punto_division + 1]
# Crear las series de tiempo finales
BoxCox_train <- ts(BoxCox_train, start = c(year(fecha_inicio), yday(fecha_inicio)), frequency = 365)
BoxCox_test <- ts(BoxCox_test, start = c(year(fecha_inicio_test), yday(fecha_inicio_test)), frequency = 365)
# Crear las series de tiempo finales
BoxCox_train <- ts(BoxCox_train, start = c(year(fecha_inicio), yday(fecha_inicio)), frequency = 12)
BoxCox_test <- ts(BoxCox_test, start = c(year(fecha_inicio_test), yday(fecha_inicio_test)), frequency = 12)
FE_Apertura = data.frame(matrix(ncol = 6, nrow = nrow(P)))
colnames(FE_Apertura) = c('alpha', 'beta', 'gamma', 'seasonal','MSE', 'MSE test')
BoxCox_test
# Crear combinaciones de los parámetros alpha, beta, gamma, y estacionalidad
P <- expand.grid('alpha' = list(NULL),
'beta' = list(F, NULL),
'gamma' = list(F, NULL),
'seasonal' = list('additive', 'multiplicative'))
# Crear función para cross-validation con Holt-Winters
cross_validate_hw <- function(ts_data, params, h = 12, k_folds = 10) {
n <- length(ts_data)
fold_size <- floor(n / k_folds)
errors <- numeric(k_folds)
for (k in 1:k_folds) {
# Definir los límites del conjunto de entrenamiento y prueba
end_train <- n - (k_folds - k) * fold_size
ts_train <- window(ts_data, end = time(ts_data)[end_train])
ts_test <- window(ts_data, start = time(ts_data)[end_train + 1])
# Mensajes de depuración
print(paste("Fold:", k, "Train end:", time(ts_train)[end_train], "Test start:", time(ts_test)[1]))
# Verificar que las ventanas no sean NULL o NA
if (is.null(ts_train) || is.null(ts_test)) {
stop("Error: Train or test set is NULL")
}
# Ajustar el modelo Holt-Winters con los parámetros dados
model <- HoltWinters(ts_train,
alpha = params$alpha,
beta = params$beta,
gamma = params$gamma,
seasonal = params$seasonal)
# Predicciones
predictions <- predict(model, h = length(ts_test))
# Calcular el MSE para este fold
errors[k] <- mean((ts_test - predictions)^2, na.rm = TRUE)
}
return(mean(errors))
}
# Ejecutar la validación cruzada para cada combinación de parámetros
for (i in 1:nrow(P)) {
params <- P[i, ]
mse <- cross_validate_hw(BoxCox_train, params)
FE_Apertura[i,] <- c(params$alpha, params$beta, params$gamma, params$seasonal, mse, NA) # Aquí puedes reemplazar NA por el MSE en test si es necesario
}
# Imprimir resultados de la validación cruzada
print(FE_Apertura)
BoxCox_train
# Crear combinaciones de los parámetros alpha, beta, gamma, y estacionalidad
P <- expand.grid('beta' = list(F, NULL),
'gamma' = list(F, NULL),
'seasonal' = c('additive', 'multiplicative'))
# Crear función para cross-validation con Holt-Winters
cross_validate_hw <- function(ts_data, params, h = 12, k_folds = 10) {
n <- length(ts_data)
fold_size <- floor(n / k_folds)
errors <- numeric(k_folds)
for (k in 1:k_folds) {
# Definir los límites del conjunto de entrenamiento y prueba
end_train <- n - (k_folds - k) * fold_size
ts_train <- window(ts_data, end = time(ts_data)[end_train])
ts_test <- window(ts_data, start = time(ts_data)[end_train + 1])
# Mensajes de depuración
print(paste("Fold:", k, "Train end:", time(ts_train)[end_train], "Test start:", time(ts_test)[1]))
# Verificar que las ventanas no sean NULL o NA
if (is.null(ts_train) || is.null(ts_test)) {
stop("Error: Train or test set is NULL")
}
# Ajustar el modelo Holt-Winters con los parámetros dados
model <- HoltWinters(ts_train,
alpha = params$alpha,
beta = params$beta,
gamma = params$gamma,
seasonal = params$seasonal)
# Predicciones
predictions <- predict(model, h = length(ts_test))
# Calcular el MSE para este fold
errors[k] <- mean((ts_test - predictions)^2, na.rm = TRUE)
}
return(mean(errors))
}
# Ejecutar la validación cruzada para cada combinación de parámetros
for (i in 1:nrow(P)) {
params <- P[i, ]
mse <- cross_validate_hw(BoxCox_train, params)
FE_Apertura[i,] <- c(params$alpha, params$beta, params$gamma, params$seasonal, mse, NA) # Aquí puedes reemplazar NA por el MSE en test si es necesario
}
# Imprimir resultados de la validación cruzada
print(FE_Apertura)
# Asegúrate de que P contenga los valores correctos para "seasonal"
P <- expand.grid('beta' = list(F, NULL),
'gamma' = list(F, NULL),
'seasonal' = c('additive', 'multiplicative'))
cross_validate_hw <- function(ts_data, params, h = 365, k_folds = 10) {
n <- length(ts_data)
fold_size <- floor(n / k_folds)
errors <- numeric(k_folds)
for (k in 1:k_folds) {
end_train <- n - (k_folds - k) * fold_size
ts_train <- window(ts_data, end = time(ts_data)[end_train])
ts_test <- window(ts_data, start = time(ts_data)[end_train + 1])
print(paste("Fold:", k, "Train end:", time(ts_data)[end_train], "Test start:", time(ts_data)[end_train + 1]))
if (is.null(ts_train) || is.null(ts_test)) {
stop("Error: Train or test set is NULL")
}
# Configurar parámetros de estacionalidad correctamente
seasonal_value <- ifelse(is.null(params$seasonal), NULL, as.character(params$seasonal))
# Ajustar el modelo Holt-Winters
model <- HoltWinters(ts_train,
alpha = params$alpha,
beta = params$beta,
gamma = params$gamma,
seasonal = seasonal_value)
# Predicciones
predictions <- predict(model, h = h)
# Calcular el MSE para este fold
errors[k] <- mean((ts_test - predictions)^2, na.rm = TRUE)
}
return(mean(errors))
}
# Bucle para probar todos los parámetros en P
for (i in 1:nrow(P)) {
params <- P[i, ]
mse <- cross_validate_hw(BoxCox_train, params)
FE_Apertura[i,] <- c(params$alpha, params$beta, params$gamma, params$seasonal, mse, NA)
}
P <- expand.grid('beta' = list(F, NULL),
'gamma' = list(F, NULL),
'seasonal' = list('additive', 'multiplicative'))
# Definir las fechas de inicio y fin
fecha_inicio <- as.Date("2012-01")
fecha_fin <- as.Date("2023-12")
# Definir las fechas de inicio y fin
fecha_inicio <- as.yearmon("2012-01")
fecha_fin <- as.yearmon("2023-12")
# Crear un vector de fechas
fechas <- seq(fecha_inicio, fecha_fin, by = 'month')
# Crear un vector de fechas
fechas <- seq(fecha_inicio, fecha_fin)
fechas
# Crear un vector de fechas
fechas <- seq(fecha_inicio, fecha_fin, by = 'month')
# Asumiendo que BoxCox2 es tu vector de datos transformados
# Si no lo tienes, reemplaza BoxCox2 con tus datos reales
BoxCox <- ts(Diff_BoxCox, start = c(2012, 1), frequency = 12)
BoxCox
# Calcular el punto de división para el 70%
n <- length(BoxCox)
punto_division <- floor(n * 0.7)
# Crear los conjuntos de entrenamiento y prueba
BoxCox_train <- window(BoxCox, end = time(BoxCox)[punto_division])
BoxCox_test <- window(BoxCox, start = time(BoxCox)[punto_division + 1])
# Ajustar las fechas de inicio para train y test
fecha_inicio_test <- fechas[punto_division + 1]
# Crear las series de tiempo finales
BoxCox_train <- ts(BoxCox_train, start = c(year(fecha_inicio), yday(fecha_inicio)), frequency = 12)
BoxCox_test <- ts(BoxCox_test, start = c(year(fecha_inicio_test), yday(fecha_inicio_test)), frequency = 12)
# Crear las series de tiempo finales
BoxCox_train <- ts(BoxCox_train, start = c(year(fecha_inicio)), frequency = 12)
BoxCox_test <- ts(BoxCox_test, start = c(year(fecha_inicio_test)), frequency = 12)
fecha_inicio_test
# Ajustar las fechas de inicio para train y test
fecha_inicio_test <- fechas[punto_division + 1]
punto_division <- floor(n * 0.7)
punto_division
fechas
# Crear un vector de fechas
fechas <- seq(fecha_inicio, fecha_fin, by = 'month')
fechas
# Definir las fechas de inicio y fin correctamente usando as.Date
fecha_inicio <- as.Date("2012-01-01")
fecha_fin <- as.Date("2023-12-01")
# Crear un vector de fechas mensuales desde fecha_inicio hasta fecha_fin
fechas <- seq(from = fecha_inicio, to = fecha_fin, by = 'month')
fechas
# Asumiendo que BoxCox2 es tu vector de datos transformados
# Si no lo tienes, reemplaza BoxCox2 con tus datos reales
BoxCox <- ts(Diff_BoxCox, start = c(2012, 1), frequency = 12)
# Calcular el punto de división para el 70%
n <- length(BoxCox)
punto_division <- floor(n * 0.7)
# Crear los conjuntos de entrenamiento y prueba
BoxCox_train <- window(BoxCox, end = time(BoxCox)[punto_division])
BoxCox_test <- window(BoxCox, start = time(BoxCox)[punto_division + 1])
# Ajustar las fechas de inicio para train y test
fecha_inicio_test <- fechas[punto_division + 1]
# Crear las series de tiempo finales
BoxCox_train <- ts(BoxCox_train, start = c(year(fecha_inicio)), frequency = 12)
fecha_inicio_test
# Crear las series de tiempo finales
BoxCox_train <- ts(BoxCox_train, start = c(year(fecha_inicio)), frequency = 12)
BoxCox_test <- ts(BoxCox_test, start = c(year(fecha_inicio_test)), frequency = 12)
BoxCox_train
BoxCox_test
FE_Apertura = data.frame(matrix(ncol = 6, nrow = nrow(P)))
colnames(FE_Apertura) = c('alpha', 'beta', 'gamma', 'seasonal','MSE', 'MSE test')
nrow(Box.test())
nrow(BoxCox_test)
dim(BoxCox_test)
glimpse(BoxCox_test)
cross_validate_hw <- function(ts_data, params, h = 43, k_folds = 10) {
n <- length(ts_data)
fold_size <- floor(n / k_folds)
errors <- numeric(k_folds)
for (k in 1:k_folds) {
end_train <- n - (k_folds - k) * fold_size
ts_train <- window(ts_data, end = time(ts_data)[end_train])
ts_test <- window(ts_data, start = time(ts_data)[end_train + 1])
# Agregar mensajes de depuración para verificar los valores
print(paste("Fold:", k, "Train end:", time(ts_data)[end_train], "Test start:", time(ts_data)[end_train + 1]))
# Verificar que las ventanas no sean NULL o NA
if (is.null(ts_train) || is.null(ts_test)) {
stop("Error: Train or test set is NULL")
}
# Ajustar el modelo Holt-Winters
model <- HoltWinters(ts_train,
alpha = params$alpha,
beta = params$beta,
gamma = params$gamma,
seasonal = params$seasonal)
# Predicciones
predictions <- predict(model, h = h)
# Calcular el MSE para este fold
errors[k] <- mean((ts_test - predictions)^2)
}
return(mean(errors))
}
# Ajustar un modelo Holt-Winters optimizando los parámetros alpha, beta, gamma
optimize_hw <- function(ts_data, h = 43) {
model <- HoltWinters(ts_data,
alpha = NULL,
beta = NULL,
gamma = NULL,
seasonal = "additive")
# Predecir para el conjunto de prueba
predictions <- predict(model, h = h)
# Calcular el MSE
return(list(model = model, mse = mean((BoxCox_test - predictions)^2)))
}
optimize_hw
# Ejecutar la optimización
best_model <- optimize_hw(BoxCox_train)
# Visualizar el resultado
plot(fitted(best_model$model))
# Definir márgenes para la gráfica
par(mar = c(5, 4, 4, 5))
# Graficar la serie temporal original
plot.ts(BoxCox, col = 'gray21',
main = 'Precio de la acción del grupo Argos en la apertura',
ylab = 'Precio',
xlab = 'Tiempo')
# Graficar los valores ajustados del mejor modelo (fitted)
lines(best_model$model$fitted[, 'xhat'], col = 'red', lwd = 1)  # Valores ajustados
# Graficar las predicciones del conjunto de prueba
predicted_values <- predict(best_model$model, length(BoxCox_test))
predicted_values <- ts(predicted_values, start = start(BoxCox_test), frequency = frequency(BoxCox_test))
lines(predicted_values, col = 'orange', lwd = 1)  # Predicciones
ModExp2 = stats::HoltWinters(BoxCox_train,
beta = FALSE,
seasonal = 'multiplicative')
ModExp2 = stats::HoltWinters(BoxCox_train,
beta = FALSE,
seasonal = 'additive')
plot(fitted(ModExp2))
# Graficar resultados
par(mar = c(5, 4, 4, 5))
plot.ts(BoxCox, col = 'gray21',
main = 'Precio de la acción del grupo Argos en la apertura',
ylab = 'Precio',
xlab = 'Tiempo')
# Graficar valores ajustados
# ModExp$fitted['xhat'] ya es una serie de tiempo, podemos utilizarla directamente
lines(ModExp2$fitted[, 'xhat'], col = 'red')
# Graficar predicciones
# Asegurarse de que los valores predichos sean una serie temporal con el mismo inicio y frecuencia
predicted_values <- predict(ModExp2, length(BoxCox_test))
predicted_values <- ts(predicted_values, start = start(BoxCox_test), frequency = frequency(BoxCox_test))
lines(predicted_values, col = 'orange')
# Leyenda
legend('topright', legend = c('Datos originales', 'Valores ajustados', 'Test'),
col = c('gray21', 'red', 'orange'), lty = 1, bty = 'n', lwd = c(1, 2, 2))
